{
	"info": {
		"_postman_id": "c01a5395-0fc2-4dbf-805f-7c9e601ec1d4",
		"name": "HW 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 (token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Valeria",
							"type": "text"
						},
						{
							"key": "password",
							"value": "231093",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" // 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"\"type\": \"object\",\r",
							"\"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"],\r",
							"\"properties\": {\r",
							"    \"person\": {\"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"u_age\": {\"type\": \"number\"},\r",
							"                    \"u_name\": {\"type\": \"array\",\r",
							"                                \"items\": {\r",
							"                                    \"type\": [\"string\", \"number\"],\r",
							"                                }\r",
							"                            },\r",
							"                    \"u_salary_1_5_year\": {\"type\": \"number\"}\r",
							"                    }, \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"]\r",
							"                },\r",
							"    \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
							"    \"qa_salary_after_6_months\": {\"type\": \"number\"},\r",
							"    \"start_qa_salary\": {\"type\": \"number\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var jsonData = pm.response.json();\r",
							"var salary = jsonData.start_qa_salary;\r",
							"var salary_1 = jsonData.qa_salary_after_6_months;\r",
							"var salary_2 = jsonData.qa_salary_after_12_months;\r",
							"var salary_3 = jsonData.person.u_salary_1_5_year;\r",
							"pm.test(\"Coefficient_check\", function () {\r",
							"    pm.expect(salary_1).to.eql(salary * 2);\r",
							"    pm.expect(salary_2).to.eql(salary * 2.9);\r",
							"    pm.expect(salary_3).to.eql(salary * 4);\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"var salary_get_test_user = salary_3;\r",
							"pm.environment.set(\"salary_for_get_test_user\", salary_get_test_user);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": 28,\r\n\"salary\": 1000,\r\n\"name\": \"Valeria\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"\"type\": \"object\",\r",
							"\"required\": [\"age\", \"name\", \"salary\"],\r",
							"\"properties\": {\r",
							"    \"age\": {\"type\": \"number\"},\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\"type\": \"array\",\r",
							"                \"items\": {\"type\": [\"number\", \"string\"]}\r",
							"                }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var jsonData = pm.response.json();\r",
							"var salary = jsonData.salary;\r",
							"salary = salary.map(Number);\r",
							"var salary_1 = salary[0];\r",
							"var salary_2 = salary[1];\r",
							"var salary_3 = salary[2];\r",
							"\r",
							"pm.test(\"Coefficient_check\", function () {\r",
							"    pm.expect(salary_2).to.eql(salary_1 * 2);\r",
							"    pm.expect(salary_3).to.eql(salary_1 * 3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"var largest = Math.max.apply(0, salary);\r",
							"\r",
							"pm.test(\"Check if the third one is the largest\", function () {\r",
							"    pm.expect(salary_3).to.eql(largest);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Valeria",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"],\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"number\"},\r",
							"        \"daily_food\": {\"type\": \"number\"},\r",
							"        \"daily_sleep\": {\"type\": \"number\"},\r",
							"        \"name\": {\"type\": \"string\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var reqData = request.data;\r",
							"var weight = reqData.weight;\r",
							"var jsonData = pm.response.json();\r",
							"var daily_food = jsonData.daily_food;\r",
							"var daily_sleep = jsonData.daily_sleep;\r",
							"pm.test(\"Weight_coefficient_check\", function () {\r",
							"    pm.expect(daily_food).to.eql(weight * 0.012);\r",
							"    pm.expect(daily_sleep).to.eql(weight * 2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "4",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "5",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vasya",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"\"type\": \"object\",\r",
							"\"required\": [\"age\", \"name\", \"salary\", \"family\"],\r",
							"\"properties\": {\r",
							"    \"age\": {\"type\": \"string\"},\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\"type\": \"number\"},\r",
							"    \"family\": {\"type\":\"object\",\r",
							"               \"required\": [\"children\", \"u_salary_1_5_year\"],\r",
							"               \"properties\": {\r",
							"                   \"children\": {\"type\": \"array\",\r",
							"                   \"items\": {\"type\": \"array\", \r",
							"                   \"items\": {\"type\": [\"string\", \"number\"]}\r",
							"                            }\r",
							"                        },\r",
							"                   \"u_salary_1_5_year\": {\"type\": \"number\"}\r",
							"                    }\r",
							"                }\r",
							"        }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var req_data = request.data;\r",
							"var req_name = req_data.name;\r",
							"pm.test(\"Check the name field\", function () {\r",
							"    pm.expect(req_name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var req_data = request.data;\r",
							"var req_age = req_data.age;\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Check ages\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_for_get_test_user}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// // ***\r",
							"// // 1) получить список валют\r",
							"// // 2) итерировать список валют\r",
							"// // 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// // 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// // 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// // 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// // {\r",
							"// //     \"Cur_Abbreviation\": str\r",
							"// //     \"Cur_ID\": int,\r",
							"// //     \"Cur_Name\": str,\r",
							"// //     \"Cur_OfficialRate\": float,\r",
							"// //     \"Cur_Scale\": int,\r",
							"// //     \"Date\": str\r",
							"// // }\r",
							"// // 7) переходим к следующей итерации\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var length = jsonData.length;\r",
							"var cur_arr = [];\r",
							"for (var i = 0; i < length; i++) {\r",
							"    cur_arr.push(jsonData[i].Cur_ID)\r",
							"};\r",
							"var cur_length = cur_arr.length;\r",
							"var valid_curr = [];\r",
							"for (var y = 0; y < cur_length; y++) {\r",
							"    \r",
							"    var postRequest = {\r",
							"        url: 'http://162.55.220.72:5005/curr_byn',\r",
							"        method: 'POST',\r",
							"        header: {'Content-Type': 'application/json',\r",
							"                },\r",
							"        body: {\r",
							"            mode: 'formdata',\r",
							"            formdata: [\r",
							"                    {key: \"auth_token\", value: pm.environment.get(\"token\")},\r",
							"                {key: \"curr_code\", value: cur_arr[y]} \r",
							"            ]\r",
							"                \r",
							"            } \r",
							"        };\r",
							"        \r",
							"    pm.sendRequest(postRequest, function (error, response) {\r",
							"            try {\r",
							"                if (response.json().Cur_OfficialRate)\r",
							"                    console.log(response.json())\r",
							"                    valid_curr.push(response.json().Cur_ID)\r",
							"                }\r",
							"            catch (error) {\r",
							"                console.log(\"Sorry, no data available\")\r",
							"                }\r",
							"            \r",
							"        pm.environment.set(\"valid_currency_arr\", valid_curr);\r",
							"    });\r",
							"    \r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"\"type\": \"object\",\r",
							"\"required\": [\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"],\r",
							"\"properties\": {\r",
							"    \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
							"    \"Cur_ID\": {\"type\": \"number\"},\r",
							"    \"Cur_Name\": {\"type\": \"string\"},\r",
							"    \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
							"    \"Cur_Scale\": {\"type\": \"number\"},\r",
							"    \"Date\": {\"type\": \"string\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var array = pm.environment.get(\"valid_currency_arr\");\r",
							"var arr_length = array.length;\r",
							"var rand = Math.floor(Math.random() * arr_length);\r",
							"pm.environment.set(\"Cur_ID\", array[rand]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}